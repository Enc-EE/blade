!function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(a,r,function(t){return e[t]}.bind(null,r));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var a=function(){function e(){var e=this;this.animatables=[],this.fps=40,this.fpsInterval=1e3/this.fps,this.animate=function(){requestAnimationFrame(e.animate);var t=Date.now(),n=t-e.lastFrameTime;if(n>e.fpsInterval){e.lastFrameTime=t;for(var a=0,r=e.animatables;a<r.length;a++){r[a].update(n)}e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height);for(var o=0,i=e.animatables;o<i.length;o++){i[o].draw(e.ctx,e.canvas.width,e.canvas.height)}}}}return e.createInBody=function(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var t=document.createElement("canvas");document.body.appendChild(t),t.style.width="100%",t.style.height="100%";var n=new e;return n.canvas=t,n.ctx=t.getContext("2d"),n.startAnimation(),n.resize(),n},e.prototype.resize=function(){this.canvas.width=this.canvas.clientWidth,this.canvas.height=this.canvas.clientHeight},e.prototype.startAnimation=function(){this.lastFrameTime=Date.now(),this.animate()},e}(),r=function(){return function(e,t){var n=this;this.controller=e,this.color=t,this.update=function(e){n.angle=n.angle+Math.PI/9,n.angle=n.angle%(2*Math.PI),n.vx+=n.controller.xAxes/600,n.vy+=n.controller.yAxes/600,n.x+=n.vx*e,n.y+=n.vy*e},this.draw=function(e,t,a){e.fillStyle=n.color,e.save(),e.translate(n.x,n.y),e.rotate(n.angle),e.fillRect(-25,-25,50,50),e.restore()},this.x=0,this.y=0,this.vx=0,this.vy=0,this.angle=0}}(),o=function(){return function(e,t,n,a){var r=this;this.xAxes=0,this.yAxes=0,document.addEventListener("keydown",function(o){o.keyCode==e&&(r.xAxes=-1),o.keyCode==t&&(r.yAxes=-1),o.keyCode==n&&(r.xAxes=1),o.keyCode==a&&(r.yAxes=1)}),document.addEventListener("keyup",function(o){o.keyCode==e&&(r.xAxes=-1)&&(r.xAxes=0),o.keyCode==t&&(r.yAxes=-1)&&(r.yAxes=0),o.keyCode==n&&(r.xAxes=1)&&(r.xAxes=0),o.keyCode==a&&(r.yAxes=1)&&(r.yAxes=0)})}}(),i=function(){function e(){}return Object.defineProperty(e.prototype,"xAxes",{get:function(){return navigator.getGamepads()[2].axes[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"yAxes",{get:function(){return navigator.getGamepads()[2].axes[1]},enumerable:!0,configurable:!0}),e}(),s=function(){function e(){}return e.prototype.run=function(){var e=a.createInBody(),t=new r(new o(37,38,39,40),"black");e.animatables.push(t);var n=new r(new o(65,87,68,83),"green");e.animatables.push(n);var s=new r(new i,"red");navigator.getGamepads()[0]?e.animatables.push(s):window.addEventListener("gamepadconnected",function(t){e.animatables.push(s)})},e}();document.addEventListener("DOMContentLoaded",function(){(new s).run()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,