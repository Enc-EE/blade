!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var i=function(){function e(){var e=this;this.animations=[],this.updates=[],this.isRunning=!1,this.addAnimation=function(t){e.animations.push(t)},this.removeAnimation=function(t){e.animations.splice(e.animations.indexOf(t),1)},this.addUpdate=function(t){e.updates.push(t)},this.removeUpdate=function(t){e.updates.splice(e.updates.indexOf(t),1)},this.addAnimatable=function(t){e.updates.push(t.update),e.animations.push(t.draw)},this.removeAnimatable=function(t){e.updates.splice(e.updates.indexOf(t.update),1),e.animations.splice(e.animations.indexOf(t.draw),1)},this.addView=function(t){e.addAnimatable(t),t.width=e.width,t.height=e.height},this.removeView=function(t){e.removeAnimatable(t)},this.fps=40,this.fpsInterval=1e3/this.fps,this.animate=function(){e.isRunning&&requestAnimationFrame(e.animate);var t=Date.now(),n=t-e.lastFrameTime;if(n>e.fpsInterval){e.lastFrameTime=t;for(var i=n/1e3,o=0,a=e.updates;o<a.length;o++){(0,a[o])(i)}e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height);for(var r=0,s=e.animations;r<s.length;r++){(0,s[r])(e.ctx,e.canvas.width,e.canvas.height)}}}}return Object.defineProperty(e.prototype,"width",{get:function(){return this.canvas.width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.canvas.height},enumerable:!0,configurable:!0}),e.createInBody=function(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var t=document.createElement("canvas");document.body.appendChild(t),t.style.width="100%",t.style.height="100%";var n=new e;return n.canvas=t,n.ctx=t.getContext("2d"),document.addEventListener("keyup",function(e){80==e.keyCode&&n.playPause(),console.log(e.keyCode)}),n.startAnimation(),n.resize(),n},e.prototype.resize=function(){this.canvas.width=this.canvas.clientWidth,this.canvas.height=this.canvas.clientHeight},e.prototype.startAnimation=function(){this.isRunning=!0,this.lastFrameTime=Date.now(),this.animate()},e.prototype.stopAnimation=function(){this.isRunning=!1},e.prototype.playPause=function(){this.isRunning?this.stopAnimation():this.startAnimation()},e}(),o=function(){return function(){var e=this;this.animations=[],this.updates=[],this.isVisible=!0,this.update=function(t){if(e.isVisible)for(var n=0,i=e.updates;n<i.length;n++)(0,i[n])(t)},this.draw=function(t,n,i){if(e.isVisible)for(var o=0,a=e.animations;o<a.length;o++)(0,a[o])(t,n,i)},this.show=function(){e.isVisible=!0},this.hide=function(){e.isVisible=!1},this.addAnimation=function(t){e.animations.push(t)},this.removeAnimation=function(t){e.animations.splice(e.animations.indexOf(t),1)},this.addUpdate=function(t){e.updates.push(t)},this.removeUpdate=function(t){e.updates.splice(e.updates.indexOf(t),1)},this.addAnimatable=function(t){e.updates.push(t.update),e.animations.push(t.draw)},this.removeAnimatable=function(t){e.updates.splice(e.updates.indexOf(t.update),1),e.animations.splice(e.animations.indexOf(t.draw),1)}}}(),a=function(){function e(e,t,n,i,o){var a=this;this.controller=e,this.onShow=t,this.onAdd=n,this.onRemove=i,this.start=o,this.isShown=!1,this.isAdded=!1,this.addTimerSeconds=1.5,this.removeTimerSeconds=2.5,this.rememberedX=0,this.rememberedY=0,this.location=0,this.update=function(e){a.isShown?a.isAdded?(a.angle=a.angle+Math.PI/9,a.angle=a.angle%(2*Math.PI),a.x=a.rememberedX+25*a.controller.xAxes,a.y=a.rememberedY+25*a.controller.yAxes,a.controller.yAxes>.3?(a.addTimer+=a.controller.yAxes*e,a.addTimer>=a.removeTimerSeconds&&(a.addTimer=0,a.isShown=!1,a.isAdded=!1,a.onRemove(a))):a.controller.yAxes<.1&&(a.addTimer=0),a.controller.start&&(console.log("start"),a.start())):a.controller.yAxes<-.3?(a.addTimer-=a.controller.yAxes*e,a.addTimer>=a.addTimerSeconds&&(a.onAdd(a),a.isAdded=!0,a.addTimer=0)):a.controller.yAxes>-.1&&(a.addTimer=0,a.isShown=!1,a.onRemove(a)):a.controller.yAxes<-.3&&(a.onShow(a),a.isShown=!0,a.addTimer-=a.controller.yAxes*e)},this.draw=function(e,t,n){if(a.location>0){console.log(a.location);var i="black",o=0,r=0;switch(a.location){case 1:i="red",o=t/3,r=(n-100)/3+100;break;case 2:i="green",o=t/3*2,r=(n-100)/3+100;break;case 3:i="blue",o=t/3,r=(n-100)/3*2+100;break;case 4:i="orange",o=t/3*2,r=(n-100)/3*2+100}a.color=i,a.x=o,a.y=r,a.rememberedX=o,a.rememberedY=r,a.location=0}e.fillStyle=a.color,e.save(),e.translate(a.x,a.y),a.isAdded&&(e.save(),e.rotate(a.angle),e.fillRect(-25,-25,50,50),e.restore()),a.isShown&&!a.isAdded&&e.fillRect(-25,35,50/a.addTimerSeconds*a.addTimer,10),a.isShown&&a.isAdded&&a.addTimer>0&&e.fillRect(-25,35,50-50/a.removeTimerSeconds*a.addTimer,10),e.restore()},this.color="black",this.x=0,this.y=0,this.angle=0,this.addTimer=0}return Object.defineProperty(e.prototype,"controllerName",{get:function(){return this.controller.name},enumerable:!0,configurable:!0}),e}(),r=function(){return function(e,t,n,i,o){var a=this;this.name=e,this.xAxes=0,this.yAxes=0,this.start=!1,document.addEventListener("keydown",function(e){e.keyCode==t&&(a.xAxes=-1),e.keyCode==n&&(a.yAxes=-1),e.keyCode==i&&(a.xAxes=1),e.keyCode==o&&(a.yAxes=1),13==e.keyCode&&(a.start=!0)}),document.addEventListener("keyup",function(e){e.keyCode==t&&(a.xAxes=-1)&&(a.xAxes=0),e.keyCode==n&&(a.yAxes=-1)&&(a.yAxes=0),e.keyCode==i&&(a.xAxes=1)&&(a.xAxes=0),e.keyCode==o&&(a.yAxes=1)&&(a.yAxes=0),13==e.keyCode&&(a.start=!1)})}}(),s=function(){function e(e,t){this.name=e,this.index=t}return Object.defineProperty(e.prototype,"xAxes",{get:function(){return navigator.getGamepads()[this.index].axes[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"yAxes",{get:function(){return navigator.getGamepads()[this.index].axes[1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"start",{get:function(){return navigator.getGamepads()[this.index].buttons[9].pressed},enumerable:!0,configurable:!0}),e}(),d=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),l=function(e){function t(t){var n=e.call(this)||this;n.start=t,n.menuBlades=[],n.controllers=[],n.gamepads={},n.showMenuBlade=function(e){console.log(e.controllerName),n.menuBlades.length<=4?(n.menuBlades.push(e),e.location=n.menuBlades.length):console.log("Sorry, only 4 controllers supported")},n.addController=function(e){n.controllers.push(e.controller),console.log("added controller "+e.controllerName)},n.removeControllerAndMenuBlade=function(e){n.menuBlades.splice(n.menuBlades.indexOf(e),1),n.controllers.splice(n.controllers.indexOf(e.controller),1),console.log("removed controller "+e.controllerName);for(var t=0;t<n.menuBlades.length;t++){n.menuBlades[t].location=t+1}},n.connecthandler=function(e){console.log("gamepad connected: "+e.gamepad.index+"/"+e.gamepad.id),n.addgamepad(e.gamepad)},n.scangamepads=function(){console.log("scangamepads");for(var e=navigator.getGamepads?navigator.getGamepads():[],t=0;t<e.length;t++)e[t]&&(console.log("scanned gamepad: "+e[t].index+"/"+e[t].id),e[t].index in n.gamepads?n.gamepads[e[t].index]=e[t]:n.addgamepad(e[t]))},n.disconnecthandler=function(e){console.log("gamepad disconnected: "+e.gamepad.index+"/"+e.gamepad.id),n.removegamepad(e.gamepad)},n.removegamepad=function(e){console.log("removing gamepad: "+e.index+"/"+e.id),delete n.gamepads[e.index];for(var t=0;t<n.menuBlades.length;t++){if(n.menuBlades[t].controllerName==e.index.toString()){n.menuBlades.splice(t,1);break}}},n.addgamepad=function(e){console.log("adding gamepad: "+e.index+"/"+e.id),n.gamepads[e.index]=e;var t=new a(new s(e.index.toString(),e.index),n.showMenuBlade,n.addController,n.removeControllerAndMenuBlade,n.start);n.addAnimatable(t)};var i="ongamepadconnected"in window;n.addAnimation(function(e,t,n){e.fillStyle="black",e.textAlign="center",e.font="22px sans-serif",e.fillText("You can control a blade with a gamepad, the arrow keys or WASD.",t/2,50),e.fillText("Press up to join and down to leave.",t/2,80),e.fillText("Press enter on keyboard or start on a controller to start.",t/2,110)});var o=new a(new r("arrows",37,38,39,40),n.showMenuBlade,n.addController,n.removeControllerAndMenuBlade,t);n.addAnimatable(o);var d=new a(new r("wasd",65,87,68,83),n.showMenuBlade,n.addController,n.removeControllerAndMenuBlade,t);return n.addAnimatable(d),window.addEventListener("gamepadconnected",n.connecthandler),window.addEventListener("gamepaddisconnected",n.disconnecthandler),console.log("haveEvents: "+i),i||setInterval(n.scangamepads,500),n}return d(t,e),t}(o),c=function(){function e(e){var t=this;this.controller=e,this.update=function(e){if(t.rotations>0){var n=t.rotations/1e3*e*Math.PI*2;t.angle=t.angle+n,t.angle=t.angle%(2*Math.PI);var i=.5*t.A*t.cw*t.p*t.vx*Math.abs(t.vx),o=.5*t.A*t.cw*t.p*t.vy*Math.abs(t.vy),a=t.f*t.controller.xAxes-i/t.m,r=t.f*t.controller.yAxes-o/t.m;t.vx+=a*e,t.vy+=r*e,t.x+=t.vx*e,t.y+=t.vy*e}},this.draw=function(e,n,i){var o=t.rotations/t.startRotations*n/4;switch(t.bladeNumber){case 1:e.fillStyle="red",e.fillRect(0,0,o,30);break;case 2:e.fillStyle="green",e.fillRect(n,0,-o,30);break;case 3:e.fillStyle="blue",e.fillRect(0,i,o,-30);break;case 4:e.fillStyle="orange",e.fillRect(n,i,-o,-30);break;default:e.fillStyle="black"}e.save(),e.translate(t.x,t.y),e.rotate(t.angle);var a=Math.sqrt(t.r*t.r/2);e.fillRect(-a,-a,2*a,2*a),e.restore()},this.x=0,this.y=0,this.vx=0,this.vy=0,this.angle=0,this.m=.1,this.f=463,this.r=25,this.startRotations=2124,this.rotations=this.startRotations,this.A=.01,this.cw=.05,this.p=1}return e.prototype.collision=function(){var e=24+(this.vx*this.vx+this.vy*this.vy)/1492;this.rotations-=e,this.rotations<0&&(this.rotations=0)},e}(),h=function(){function e(e,t,n){var i=this;this.blades=e,this.borderRight=t,this.borderBottom=n,this.update=function(e){for(var t=0;t<i.blades.length;t++){var n=i.blades[t];i.wallCollision(n);for(var o=0;o<i.blades.length;o++)if(!(o<=t)){var a=i.blades[o],r=a.x-n.x,s=a.y-n.y,d=Math.sqrt(r*r+s*s);d<=2*n.r&&(console.log("collision"),i.positionCorrection(d,n,r,s,a),i.collisionV2(s,r,n,a))}}},this.draw=function(e,t,n){}}return e.prototype.wallCollision=function(e){e.x-e.r<0?(e.vx=-e.vx,e.x=e.r-e.x+e.r,e.collision()):e.x+e.r>this.borderRight&&(e.vx=-e.vx,e.x=this.borderRight-(e.x+e.r-this.borderRight)-e.r,e.collision()),e.y-e.r<0?(e.vy=-e.vy,e.y=e.r-e.y+e.r,e.collision()):e.y+e.r>this.borderBottom&&(e.vy=-e.vy,e.y=this.borderBottom-(e.y+e.r-this.borderBottom)-e.r,e.collision())},e.prototype.collisionV2=function(e,t,n,i){var o=Math.sqrt(t*t+e*e),a=2*n.vx*n.m,r=2*n.vy*n.m,s=Math.sqrt(a*a+r*r),d=t/o*s,l=e/o*s,c=3*i.vx*i.m,h=3*i.vy*i.m,u=Math.sqrt(c*c+h*h),m=-t/o*u,f=-e/o*u;i.vx+=d/i.m,i.vy+=l/i.m,n.vx+=m/n.m,n.vy+=f/n.m},e.prototype.positionCorrection=function(e,t,n,i,o){var a=(e-2*t.r)/2/e,r=a*n,s=a*i;t.x+=r,t.y+=s,o.x-=r,o.y-=s},e}(),u=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),m=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.started=!1,t.blades=[],t}return u(t,e),t.prototype.start=function(e){if(!this.started){this.started=!0,console.log(e);for(var t=0;t<e.length;t++){var n=e[t],i=new c(n),o=0,a=0;switch(t+1){case 1:o=this.width/3,a=this.height/3;break;case 2:o=this.width/3*2,a=this.height/3;break;case 3:o=this.width/3,a=this.height/3*2;break;case 4:o=this.width/3*2,a=this.height/3*2}i.bladeNumber=t+1,i.x=o,i.y=a,this.blades.push(i),this.addAnimatable(i)}this.addAnimatable(new h(this.blades,this.width,this.height))}},t}(o),f=function(){function e(){var e=this;this.start=function(){e.menu.hide(),e.game.show(),e.game.start(e.menu.controllers)}}return e.prototype.run=function(){this.animation=i.createInBody(),this.menu=new l(this.start),this.game=new m,this.animation.addView(this.menu),this.animation.addView(this.game),this.game.hide()},e}();document.addEventListener("DOMContentLoaded",function(){(new f).run()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,