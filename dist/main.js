!function(e){var t={};function n(o){if(t[o])return t[o].exports;var a=t[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(o,a,function(t){return e[t]}.bind(null,a));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var o=function(){function e(){var e=this;this.animations=[],this.updates=[],this.addAnimation=function(t){e.animations.push(t)},this.removeAnimation=function(t){e.animations.splice(e.animations.indexOf(t),1)},this.addUpdate=function(t){e.updates.push(t)},this.removeUpdate=function(t){e.updates.splice(e.updates.indexOf(t),1)},this.addAnimatable=function(t){e.updates.push(t.update),e.animations.push(t.draw)},this.removeAnimatable=function(t){e.updates.splice(e.updates.indexOf(t.update),1),e.animations.splice(e.animations.indexOf(t.draw),1)},this.addView=function(t){e.addAnimatable(t),t.width=e.width,t.height=e.height},this.removeView=function(t){e.removeAnimatable(t)},this.fps=40,this.fpsInterval=1e3/this.fps,this.animate=function(){requestAnimationFrame(e.animate);var t=Date.now(),n=t-e.lastFrameTime;if(n>e.fpsInterval){e.lastFrameTime=t;for(var o=n/1e3,a=0,i=e.updates;a<i.length;a++){(0,i[a])(o)}e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height);for(var r=0,s=e.animations;r<s.length;r++){(0,s[r])(e.ctx,e.canvas.width,e.canvas.height)}}}}return Object.defineProperty(e.prototype,"width",{get:function(){return this.canvas.width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.canvas.height},enumerable:!0,configurable:!0}),e.createInBody=function(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var t=document.createElement("canvas");document.body.appendChild(t),t.style.width="100%",t.style.height="100%";var n=new e;return n.canvas=t,n.ctx=t.getContext("2d"),n.startAnimation(),n.resize(),n},e.prototype.resize=function(){this.canvas.width=this.canvas.clientWidth,this.canvas.height=this.canvas.clientHeight},e.prototype.startAnimation=function(){this.lastFrameTime=Date.now(),this.animate()},e}(),a=function(){return function(){var e=this;this.animations=[],this.updates=[],this.isVisible=!0,this.update=function(t){if(e.isVisible)for(var n=0,o=e.updates;n<o.length;n++)(0,o[n])(t)},this.draw=function(t,n,o){if(e.isVisible)for(var a=0,i=e.animations;a<i.length;a++)(0,i[a])(t,n,o)},this.show=function(){e.isVisible=!0},this.hide=function(){e.isVisible=!1},this.addAnimation=function(t){e.animations.push(t)},this.removeAnimation=function(t){e.animations.splice(e.animations.indexOf(t),1)},this.addUpdate=function(t){e.updates.push(t)},this.removeUpdate=function(t){e.updates.splice(e.updates.indexOf(t),1)},this.addAnimatable=function(t){e.updates.push(t.update),e.animations.push(t.draw)},this.removeAnimatable=function(t){e.updates.splice(e.updates.indexOf(t.update),1),e.animations.splice(e.animations.indexOf(t.draw),1)}}}(),i=function(){function e(e,t,n,o,a){var i=this;this.controller=e,this.onShow=t,this.onAdd=n,this.onRemove=o,this.start=a,this.isShown=!1,this.isAdded=!1,this.addTimerSeconds=1.5,this.removeTimerSeconds=2.5,this.rememberedX=0,this.rememberedY=0,this.location=0,this.update=function(e){i.isShown?i.isAdded?(i.angle=i.angle+Math.PI/9,i.angle=i.angle%(2*Math.PI),i.x=i.rememberedX+25*i.controller.xAxes,i.y=i.rememberedY+25*i.controller.yAxes,i.controller.yAxes>.3?(i.addTimer+=i.controller.yAxes*e,i.addTimer>=i.removeTimerSeconds&&(i.addTimer=0,i.isShown=!1,i.isAdded=!1,i.onRemove(i))):i.controller.yAxes<.1&&(i.addTimer=0),i.controller.start&&(console.log("start"),i.start())):i.controller.yAxes<-.3?(i.addTimer-=i.controller.yAxes*e,i.addTimer>=i.addTimerSeconds&&(i.onAdd(i),i.isAdded=!0,i.addTimer=0)):i.controller.yAxes>-.1&&(i.addTimer=0,i.isShown=!1,i.onRemove(i)):i.controller.yAxes<-.3&&(i.onShow(i),i.isShown=!0,i.addTimer-=i.controller.yAxes*e)},this.draw=function(e,t,n){if(i.location>0){console.log(i.location);var o="black",a=0,r=0;switch(i.location){case 1:o="red",a=t/3,r=(n-100)/3+100;break;case 2:o="green",a=t/3*2,r=(n-100)/3+100;break;case 3:o="blue",a=t/3,r=(n-100)/3*2+100;break;case 4:o="orange",a=t/3*2,r=(n-100)/3*2+100}i.color=o,i.x=a,i.y=r,i.rememberedX=a,i.rememberedY=r,i.location=0}e.fillStyle=i.color,e.save(),e.translate(i.x,i.y),i.isAdded&&(e.save(),e.rotate(i.angle),e.fillRect(-25,-25,50,50),e.restore()),i.isShown&&!i.isAdded&&e.fillRect(-25,35,50/i.addTimerSeconds*i.addTimer,10),i.isShown&&i.isAdded&&i.addTimer>0&&e.fillRect(-25,35,50-50/i.removeTimerSeconds*i.addTimer,10),e.restore()},this.color="black",this.x=0,this.y=0,this.angle=0,this.addTimer=0}return Object.defineProperty(e.prototype,"controllerName",{get:function(){return this.controller.name},enumerable:!0,configurable:!0}),e}(),r=function(){return function(e,t,n,o,a){var i=this;this.name=e,this.xAxes=0,this.yAxes=0,this.start=!1,document.addEventListener("keydown",function(e){e.keyCode==t&&(i.xAxes=-1),e.keyCode==n&&(i.yAxes=-1),e.keyCode==o&&(i.xAxes=1),e.keyCode==a&&(i.yAxes=1),13==e.keyCode&&(i.start=!0)}),document.addEventListener("keyup",function(e){e.keyCode==t&&(i.xAxes=-1)&&(i.xAxes=0),e.keyCode==n&&(i.yAxes=-1)&&(i.yAxes=0),e.keyCode==o&&(i.xAxes=1)&&(i.xAxes=0),e.keyCode==a&&(i.yAxes=1)&&(i.yAxes=0),13==e.keyCode&&(i.start=!1)})}}(),s=function(){function e(e,t){this.name=e,this.index=t}return Object.defineProperty(e.prototype,"xAxes",{get:function(){return navigator.getGamepads()[this.index].axes[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"yAxes",{get:function(){return navigator.getGamepads()[this.index].axes[1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"start",{get:function(){return navigator.getGamepads()[this.index].buttons[9].pressed},enumerable:!0,configurable:!0}),e}(),d=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),l=function(e){function t(t){var n=e.call(this)||this;n.start=t,n.menuBlades=[],n.controllers=[],n.gamepads={},n.showMenuBlade=function(e){console.log(e.controllerName),n.menuBlades.length<=4?(n.menuBlades.push(e),e.location=n.menuBlades.length):console.log("Sorry, only 4 controllers supported")},n.addController=function(e){n.controllers.push(e.controller),console.log("added controller "+e.controllerName)},n.removeControllerAndMenuBlade=function(e){n.menuBlades.splice(n.menuBlades.indexOf(e),1),n.controllers.splice(n.controllers.indexOf(e.controller),1),console.log("removed controller "+e.controllerName);for(var t=0;t<n.menuBlades.length;t++){n.menuBlades[t].location=t+1}},n.connecthandler=function(e){console.log("gamepad connected: "+e.gamepad.index+"/"+e.gamepad.id),n.addgamepad(e.gamepad)},n.scangamepads=function(){console.log("scangamepads");for(var e=navigator.getGamepads?navigator.getGamepads():[],t=0;t<e.length;t++)e[t]&&(console.log("scanned gamepad: "+e[t].index+"/"+e[t].id),e[t].index in n.gamepads?n.gamepads[e[t].index]=e[t]:n.addgamepad(e[t]))},n.disconnecthandler=function(e){console.log("gamepad disconnected: "+e.gamepad.index+"/"+e.gamepad.id),n.removegamepad(e.gamepad)},n.removegamepad=function(e){console.log("removing gamepad: "+e.index+"/"+e.id),delete n.gamepads[e.index];for(var t=0;t<n.menuBlades.length;t++){if(n.menuBlades[t].controllerName==e.index.toString()){n.menuBlades.splice(t,1);break}}},n.addgamepad=function(e){console.log("adding gamepad: "+e.index+"/"+e.id),n.gamepads[e.index]=e;var t=new i(new s(e.index.toString(),e.index),n.showMenuBlade,n.addController,n.removeControllerAndMenuBlade,n.start);n.addAnimatable(t)};var o="ongamepadconnected"in window;n.addAnimation(function(e,t,n){e.fillStyle="black",e.textAlign="center",e.font="22px sans-serif",e.fillText("You can control a blade with a gamepad, the arrow keys or WASD.",t/2,50),e.fillText("Press up to join and down to leave.",t/2,80),e.fillText("Press enter on keyboard or start on a controller to start.",t/2,110)});var a=new i(new r("arrows",37,38,39,40),n.showMenuBlade,n.addController,n.removeControllerAndMenuBlade,t);n.addAnimatable(a);var d=new i(new r("wasd",65,87,68,83),n.showMenuBlade,n.addController,n.removeControllerAndMenuBlade,t);return n.addAnimatable(d),window.addEventListener("gamepadconnected",n.connecthandler),window.addEventListener("gamepaddisconnected",n.disconnecthandler),console.log("haveEvents: "+o),o||setInterval(n.scangamepads,500),n}return d(t,e),t}(a),c=function(){return function(e){var t=this;this.controller=e,this.update=function(e){t.angle=t.angle+Math.PI/9,t.angle=t.angle%(2*Math.PI);var n=.5*t.A*t.cw*t.p*t.vx*Math.abs(t.vx),o=.5*t.A*t.cw*t.p*t.vy*Math.abs(t.vy),a=t.f*t.controller.xAxes-n/t.m,i=t.f*t.controller.yAxes-o/t.m;t.vx+=a*e,t.vy+=i*e,t.x+=t.vx*e,t.y+=t.vy*e},this.draw=function(e,n,o){e.fillStyle=t.color,e.save(),e.translate(t.x,t.y),e.rotate(t.angle);var a=Math.sqrt(t.r*t.r/2);e.fillRect(-a,-a,2*a,2*a),e.restore()},this.x=0,this.y=0,this.color="black",this.vx=0,this.vy=0,this.angle=0,this.m=.1,this.f=463,this.r=25,this.A=.01,this.cw=.05,this.p=1}}(),h=function(){function e(e,t,n){var o=this;this.blades=e,this.borderRight=t,this.borderBottom=n,this.update=function(e){for(var t=0;t<o.blades.length;t++){var n=o.blades[t];n.x-n.r<0?(n.vx=-n.vx,n.x=n.r-n.x+n.r):n.x+n.r>o.borderRight&&(n.vx=-n.vx,n.x=o.borderRight-(n.x+n.r-o.borderRight)-n.r),n.y-n.r<0?(n.vy=-n.vy,n.y=n.r-n.y+n.r):n.y+n.r>o.borderBottom&&(n.vy=-n.vy,n.y=o.borderBottom-(n.y+n.r-o.borderBottom)-n.r);for(var a=0;a<o.blades.length;a++)if(!(a<=t)){var i=o.blades[a],r=i.x-n.x,s=i.y-n.y,d=Math.sqrt(r*r+s*s);d<=2*n.r&&(console.log("collision"),o.positionCorrection(d,n,r,s,i))}}},this.draw=function(e,t,n){}}return e.prototype.collision=function(e,t,n,o){var a=e/t;if(t>=0){if(a<1&&a>-1){var i=Math.atan(a);console.log(i);var r=Math.atan(n.vy/n.vx),s=Math.sqrt(n.vx*n.vx+n.vy*n.vy),d=(Math.atan(o.vy/o.vx),Math.sqrt(o.vx*o.vx+o.vy*o.vy),0);d=r>i?i-(r-i):i+(i-r);var l=-Math.cos(d)*s,c=-Math.sin(d)*s;n.vx=l,n.vy=c}}else if(a<1&&a>-1){i=-Math.atan(a);console.log(i);r=Math.atan(n.vy/n.vx),s=Math.sqrt(n.vx*n.vx+n.vy*n.vy),Math.atan(o.vy/o.vx),Math.sqrt(o.vx*o.vx+o.vy*o.vy),d=0;d=r>i?i-(r-i):i+(i-r);l=-Math.cos(d)*s,c=Math.sin(d)*s;n.vx=l,n.vy=c}},e.prototype.positionCorrection=function(e,t,n,o,a){var i=(e-2*t.r)/2/e,r=i*n,s=i*o;t.x+=r,t.y+=s,a.x-=r,a.y-=s},e}(),u=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),m=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.started=!1,t.blades=[],t}return u(t,e),t.prototype.start=function(e){if(!this.started){this.started=!0,console.log(e);for(var t=0;t<e.length;t++){var n=e[t],o=new c(n),a="black",i=0,r=0;switch(t+1){case 1:a="red",i=this.width/3,r=this.height/3;break;case 2:a="green",i=this.width/3*2,r=this.height/3;break;case 3:a="blue",i=this.width/3,r=this.height/3*2;break;case 4:a="orange",i=this.width/3*2,r=this.height/3*2}o.color=a,o.x=i,o.y=r,this.blades.push(o),this.addAnimatable(o)}this.addAnimatable(new h(this.blades,this.width,this.height))}},t}(a),f=function(){function e(){var e=this;this.start=function(){e.menu.hide(),e.game.show(),e.game.start(e.menu.controllers)}}return e.prototype.run=function(){this.animation=o.createInBody(),this.menu=new l(this.start),this.game=new m,this.animation.addView(this.menu),this.animation.addView(this.game),this.game.hide()},e}();document.addEventListener("DOMContentLoaded",function(){(new f).run()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,