!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var o=function(){function e(){var e=this;this.animations=[],this.updates=[],this.addAnimation=function(t){e.animations.push(t)},this.removeAnimation=function(t){e.animations.splice(e.animations.indexOf(t),1)},this.addUpdate=function(t){e.updates.push(t)},this.removeUpdate=function(t){e.updates.splice(e.updates.indexOf(t),1)},this.addAnimatable=function(t){e.updates.push(t.update),e.animations.push(t.draw)},this.removeAnimatable=function(t){e.updates.splice(e.updates.indexOf(t.update),1),e.animations.splice(e.animations.indexOf(t.draw),1)},this.addView=function(t){e.addAnimatable(t),t.width=e.width,t.height=e.height},this.removeView=function(t){e.removeAnimatable(t)},this.fps=40,this.fpsInterval=1e3/this.fps,this.animate=function(){requestAnimationFrame(e.animate);var t=Date.now(),n=t-e.lastFrameTime;if(n>e.fpsInterval){e.lastFrameTime=t;for(var o=0,i=e.updates;o<i.length;o++){(0,i[o])(n)}e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height);for(var a=0,r=e.animations;a<r.length;a++){(0,r[a])(e.ctx,e.canvas.width,e.canvas.height)}}}}return Object.defineProperty(e.prototype,"width",{get:function(){return this.canvas.width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.canvas.height},enumerable:!0,configurable:!0}),e.createInBody=function(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var t=document.createElement("canvas");document.body.appendChild(t),t.style.width="100%",t.style.height="100%";var n=new e;return n.canvas=t,n.ctx=t.getContext("2d"),n.startAnimation(),n.resize(),n},e.prototype.resize=function(){this.canvas.width=this.canvas.clientWidth,this.canvas.height=this.canvas.clientHeight},e.prototype.startAnimation=function(){this.lastFrameTime=Date.now(),this.animate()},e}(),i=function(){return function(){var e=this;this.animations=[],this.updates=[],this.isVisible=!0,this.update=function(t){if(e.isVisible)for(var n=0,o=e.updates;n<o.length;n++)(0,o[n])(t)},this.draw=function(t,n,o){if(e.isVisible)for(var i=0,a=e.animations;i<a.length;i++)(0,a[i])(t,n,o)},this.show=function(){e.isVisible=!0},this.hide=function(){e.isVisible=!1},this.addAnimation=function(t){e.animations.push(t)},this.removeAnimation=function(t){e.animations.splice(e.animations.indexOf(t),1)},this.addUpdate=function(t){e.updates.push(t)},this.removeUpdate=function(t){e.updates.splice(e.updates.indexOf(t),1)},this.addAnimatable=function(t){e.updates.push(t.update),e.animations.push(t.draw)},this.removeAnimatable=function(t){e.updates.splice(e.updates.indexOf(t.update),1),e.animations.splice(e.animations.indexOf(t.draw),1)}}}(),a=function(){function e(e,t,n,o,i){var a=this;this.controller=e,this.onShow=t,this.onAdd=n,this.onRemove=o,this.start=i,this.isShown=!1,this.isAdded=!1,this.addTimerSeconds=1.5,this.removeTimerSeconds=2.5,this.rememberedX=0,this.rememberedY=0,this.location=0,this.update=function(e){a.isShown?a.isAdded?(a.angle=a.angle+Math.PI/9,a.angle=a.angle%(2*Math.PI),a.x=a.rememberedX+25*a.controller.xAxes,a.y=a.rememberedY+25*a.controller.yAxes,a.controller.yAxes>.3?(a.addTimer+=a.controller.yAxes*e/1e3,a.addTimer>=a.removeTimerSeconds&&(a.addTimer=0,a.isShown=!1,a.isAdded=!1,a.onRemove(a))):a.controller.yAxes<.1&&(a.addTimer=0),a.controller.start&&(console.log("start"),a.start())):a.controller.yAxes<-.3?(a.addTimer-=a.controller.yAxes*e/1e3,a.addTimer>=a.addTimerSeconds&&(a.onAdd(a),a.isAdded=!0,a.addTimer=0)):a.controller.yAxes>-.1&&(a.addTimer=0,a.isShown=!1,a.onRemove(a)):a.controller.yAxes<-.3&&(a.onShow(a),a.isShown=!0,a.addTimer-=a.controller.yAxes*e/1e3)},this.draw=function(e,t,n){if(a.location>0){console.log(a.location);var o="black",i=0,r=0;switch(a.location){case 1:o="red",i=t/3,r=(n-100)/3+100;break;case 2:o="green",i=t/3*2,r=(n-100)/3+100;break;case 3:o="blue",i=t/3,r=(n-100)/3*2+100;break;case 4:o="orange",i=t/3*2,r=(n-100)/3*2+100}a.color=o,a.x=i,a.y=r,a.rememberedX=i,a.rememberedY=r,a.location=0}e.fillStyle=a.color,e.save(),e.translate(a.x,a.y),a.isAdded&&(e.save(),e.rotate(a.angle),e.fillRect(-25,-25,50,50),e.restore()),a.isShown&&!a.isAdded&&e.fillRect(-25,35,50/a.addTimerSeconds*a.addTimer,10),a.isShown&&a.isAdded&&a.addTimer>0&&e.fillRect(-25,35,50-50/a.removeTimerSeconds*a.addTimer,10),e.restore()},this.color="black",this.x=0,this.y=0,this.angle=0,this.addTimer=0}return Object.defineProperty(e.prototype,"controllerName",{get:function(){return this.controller.name},enumerable:!0,configurable:!0}),e}(),r=function(){return function(e,t,n,o,i){var a=this;this.name=e,this.xAxes=0,this.yAxes=0,this.start=!1,document.addEventListener("keydown",function(e){e.keyCode==t&&(a.xAxes=-1),e.keyCode==n&&(a.yAxes=-1),e.keyCode==o&&(a.xAxes=1),e.keyCode==i&&(a.yAxes=1),13==e.keyCode&&(a.start=!0)}),document.addEventListener("keyup",function(e){e.keyCode==t&&(a.xAxes=-1)&&(a.xAxes=0),e.keyCode==n&&(a.yAxes=-1)&&(a.yAxes=0),e.keyCode==o&&(a.xAxes=1)&&(a.xAxes=0),e.keyCode==i&&(a.yAxes=1)&&(a.yAxes=0),13==e.keyCode&&(a.start=!1)})}}(),s=function(){function e(e,t){this.name=e,this.index=t}return Object.defineProperty(e.prototype,"xAxes",{get:function(){return navigator.getGamepads()[this.index].axes[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"yAxes",{get:function(){return navigator.getGamepads()[this.index].axes[1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"start",{get:function(){return navigator.getGamepads()[this.index].buttons[9].pressed},enumerable:!0,configurable:!0}),e}(),d=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),l=function(e){function t(t){var n=e.call(this)||this;n.start=t,n.menuBlades=[],n.controllers=[],n.gamepads={},n.showMenuBlade=function(e){console.log(e.controllerName),n.menuBlades.length<=4?(n.menuBlades.push(e),e.location=n.menuBlades.length):console.log("Sorry, only 4 controllers supported")},n.addController=function(e){n.controllers.push(e.controller),console.log("added controller "+e.controllerName)},n.removeControllerAndMenuBlade=function(e){n.menuBlades.splice(n.menuBlades.indexOf(e),1),n.controllers.splice(n.controllers.indexOf(e.controller),1),console.log("removed controller "+e.controllerName);for(var t=0;t<n.menuBlades.length;t++){n.menuBlades[t].location=t+1}},n.connecthandler=function(e){console.log("gamepad connected: "+e.gamepad.index+"/"+e.gamepad.id),n.addgamepad(e.gamepad)},n.scangamepads=function(){console.log("scangamepads");for(var e=navigator.getGamepads?navigator.getGamepads():[],t=0;t<e.length;t++)e[t]&&(console.log("scanned gamepad: "+e[t].index+"/"+e[t].id),e[t].index in n.gamepads?n.gamepads[e[t].index]=e[t]:n.addgamepad(e[t]))},n.disconnecthandler=function(e){console.log("gamepad disconnected: "+e.gamepad.index+"/"+e.gamepad.id),n.removegamepad(e.gamepad)},n.removegamepad=function(e){console.log("removing gamepad: "+e.index+"/"+e.id),delete n.gamepads[e.index];for(var t=0;t<n.menuBlades.length;t++){if(n.menuBlades[t].controllerName==e.index.toString()){n.menuBlades.splice(t,1);break}}},n.addgamepad=function(e){console.log("adding gamepad: "+e.index+"/"+e.id),n.gamepads[e.index]=e;var t=new a(new s(e.index.toString(),e.index),n.showMenuBlade,n.addController,n.removeControllerAndMenuBlade,n.start);n.addAnimatable(t)};var o="ongamepadconnected"in window;n.addAnimation(function(e,t,n){e.fillStyle="black",e.textAlign="center",e.font="22px sans-serif",e.fillText("You can control a blade with a gamepad, the arrow keys or WASD.",t/2,50),e.fillText("Press up to join and down to leave.",t/2,80),e.fillText("Press enter on keyboard or start on a controller to start.",t/2,110)});var i=new a(new r("arrows",37,38,39,40),n.showMenuBlade,n.addController,n.removeControllerAndMenuBlade,t);n.addAnimatable(i);var d=new a(new r("wasd",65,87,68,83),n.showMenuBlade,n.addController,n.removeControllerAndMenuBlade,t);return n.addAnimatable(d),window.addEventListener("gamepadconnected",n.connecthandler),window.addEventListener("gamepaddisconnected",n.disconnecthandler),console.log("haveEvents: "+o),o||setInterval(n.scangamepads,500),n}return d(t,e),t}(i),c=function(){return function(e){var t=this;this.controller=e,this.update=function(e){t.angle=t.angle+Math.PI/9,t.angle=t.angle%(2*Math.PI),t.vx+=t.controller.xAxes/400,t.vy+=t.controller.yAxes/400,t.x+=t.vx*e,t.y+=t.vy*e},this.draw=function(e,n,o){e.fillStyle=t.color,e.save(),e.translate(t.x,t.y),e.rotate(t.angle),e.fillRect(-25,-25,50,50),e.restore()},this.x=0,this.y=0,this.color="black",this.vx=0,this.vy=0,this.angle=0}}(),u=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),h=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.start=function(e){for(var t=0;t<e.length;t++){var n=e[t],o=new c(n),i="black",a=0,r=0;switch(t+1){case 1:i="red",a=this.width/3,r=this.height/3;break;case 2:i="green",a=this.width/3*2,r=this.height/3;break;case 3:i="blue",a=this.width/3,r=this.height/3*2;break;case 4:i="orange",a=this.width/3*2,r=this.height/3*2}o.color=i,o.x=a,o.y=r,this.addAnimatable(o)}},t}(i),m=function(){function e(){var e=this;this.start=function(){e.menu.hide(),e.game.show(),e.game.start(e.menu.controllers)}}return e.prototype.run=function(){this.animation=o.createInBody(),this.menu=new l(this.start),this.game=new h,this.animation.addView(this.menu),this.animation.addView(this.game),this.game.hide()},e}();document.addEventListener("DOMContentLoaded",function(){(new m).run()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,